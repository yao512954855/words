{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "app/lib/placeholder-data.ts"
  ],
  "exclude": ["node_modules"]
}



// 一、核心配置项解析（compilerOptions）
// 这部分是 TypeScript 编译器的核心设置，控制类型检查和代码转换的规则。
// 1. 目标与环境
// target: "ES2017"
// 指定编译后 JavaScript 代码的目标版本（这里是 ES2017），决定了 TypeScript 会将高级语法转换为哪个版本的 ES 标准（如箭头函数、async/await 等是否需要降级）。
// lib: ["dom", "dom.iterable", "esnext"]
// 指定 TypeScript 可以使用的内置库类型定义：
// dom：浏览器 DOM 相关的类型（如 window、document）；
// dom.iterable：DOM 可迭代对象的类型（如 NodeList 的迭代方法）；
// esnext：最新 ES 标准的类型（支持最新语法的类型检查）。

// 2. 类型检查规则
// allowJs: true
// 允许在 TypeScript 项目中引入 JavaScript 文件（.js），并对其进行类型检查（基于 JSDoc 或推断）。
// skipLibCheck: true
// 跳过对 .d.ts 类型声明文件的检查，加快编译速度（这些文件通常来自第三方库，出错概率低）。
// strict: true
// 开启严格模式，启用一系列严格的类型检查规则（如不允许隐式 any 类型、必须明确函数返回值等），强制更规范的代码编写。
// isolatedModules: true
// 要求每个文件都是独立的模块（不能依赖全局变量），确保代码能被 Webpack、Babel 等工具正确处理（Next.js 等框架通常要求开启）。

// 3. 模块与解析
// module: "esnext"
// 指定生成的模块代码格式（esnext 表示使用最新的 ES 模块系统，如 import/export）。
// moduleResolution: "bundler"
// 指定模块解析策略（bundler 适用于 Webpack、Vite 等打包工具，优先遵循现代打包工具的解析规则）。
// resolveJsonModule: true
// 允许导入 JSON 文件（如 import data from './data.json'），并自动生成类型定义。
// baseUrl: "." 和 paths: { "@/*": ["./*"] }
// 自定义模块路径别名：
// baseUrl: "." 表示以当前目录（tsconfig.json 所在目录）为基础路径；
// paths: { "@/*": ["./*"] } 定义 @ 作为项目根目录的别名，例如 import Component from '@/components/Button' 等价于 import Component from './components/Button'，简化深层路径的导入。

// 4. 输出与 JSX
// noEmit: true
// 禁止 TypeScript 编译器生成编译后的 JavaScript 文件（在 Next.js 等框架中，编译工作由框架自带的打包工具处理，无需 TypeScript 直接输出文件）。
// jsx: "preserve"
// 指定 JSX 语法的处理方式（preserve 表示保留 JSX 语法不转换，由 Babel 或 Next.js 等工具后续处理，这是 React/Next.js 项目的常规配置）。
// incremental: true
// 启用增量编译，保存上次编译的信息到缓存文件（.tsbuildinfo），加快后续编译速度。

// 5. 插件
// plugins: [{ "name": "next" }]
// 启用 Next.js 提供的 TypeScript 插件，增强对 Next.js 特有语法（如 app 目录路由、page.tsx 等）的类型支持。
// 二、文件范围（include 和 exclude）
// include: [...]
// 指定需要 TypeScript 处理的文件范围：
// next-env.d.ts：Next.js 自动生成的环境类型文件；
// **/*.ts、**/*.tsx：所有 TypeScript 和 TSX 文件；
// .next/types/**/*.ts：Next.js 构建时生成的类型文件；
// app/lib/placeholder-data.ts：指定的单个文件（可能是项目中需要特殊处理的文件）。
// exclude: ["node_modules"]
// 排除不需要处理的文件（node_modules 包含第三方库，无需 TypeScript 检查）。